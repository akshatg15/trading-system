//@version=5
strategy("Manipulation Candle Entry - Partial TP + Plotting", overlay=true)

// === Input Parameters ===
volumeSize = input.float(0.01, "Trade Volume Size", minval=0.001, maxval=100, step=0.001, tooltip="Volume/lot size for trades")
testShort = input.bool(false, "Trigger Short Alert Now")
debugMode = input.bool(false, "Debug Mode - Show Alert Messages", tooltip="When enabled, shows alert messages on chart for debugging")

// Wrap timestamp in double quotes
getTimestampStr() =>
    '"' + str.tostring(time) + '"'

// Create properly escaped JSON string
createAlertMessage(action, entry, sl, tp1, tp2) =>
    ticker = str.replace_all(syminfo.ticker, '"', '\\"')  // Escape any quotes in ticker
    ticker := str.replace_all(ticker, '\\', '\\\\')       // Escape backslashes
    
    // Ensure numeric values are properly formatted (avoid scientific notation)
    entryStr = str.tostring(math.round(entry, 5))
    slStr = str.tostring(math.round(sl, 5))
    tp1Str = str.tostring(math.round(tp1, 5))
    tp2Str = str.tostring(math.round(tp2, 5))
    volumeStr = str.tostring(math.round(volumeSize, 3))
    
    jsonStr = '{"ticker":"' + ticker + '","action":"' + action + '","entry":' + entryStr + ',"stop_loss":' + slStr + ',"tp1":' + tp1Str + ',"tp2":' + tp2Str + ',"volume":' + volumeStr + ',"timestamp":' + getTimestampStr() + '}'
    
    // Debug output if enabled
    if debugMode
        label.new(bar_index, high + (high-low)*0.1, jsonStr, style=label.style_label_down, color=color.yellow, textcolor=color.black, size=size.small)
    
    jsonStr

// Alternative simple format (use if JSON continues to have issues)
createSimpleAlertMessage(action, entry, sl, tp1, tp2) =>
    ticker = syminfo.ticker
    entryStr = str.tostring(math.round(entry, 5))
    slStr = str.tostring(math.round(sl, 5))
    tp1Str = str.tostring(math.round(tp1, 5))
    tp2Str = str.tostring(math.round(tp2, 5))
    volumeStr = str.tostring(math.round(volumeSize, 3))
    timestampStr = str.tostring(time)
    
    ticker + "|" + action + "|" + entryStr + "|" + slStr + "|" + tp1Str + "|" + tp2Str + "|" + volumeStr + "|" + timestampStr

if testShort
    alertMsg = createAlertMessage("sell", close, high, close - (high - close), close - 2 * (high - close))
    alert(alertMsg, alert.freq_once_per_bar)

// === Manipulation Candle Detection ===
prevHigh = high[1]
prevLow = low[1]
prevClose = close[1]

// Bullish Manipulation: Current candle wicks below previous low but closes above previous high
isBullMC = low < prevLow and close > prevHigh and low < prevClose
// Bearish Manipulation: Current candle wicks above previous high but closes below previous low  
isBearMC = high > prevHigh and close < prevLow and high > prevClose

// === Entry Conditions ===
enterLong = isBullMC and not isBullMC[1]  // Only on new manipulation candle
enterShort = isBearMC and not isBearMC[1] // Only on new manipulation candle

// === Persistent Trade State ===
var float entryPrice = na
var float stopLoss = na
var float takeProfit1 = na
var float takeProfit2 = na
var string tradeSide = na
var bool inTrade = false

// === LONG Entry ===
if enterLong and not inTrade
    entryPrice := close
    stopLoss := prevLow
    riskReward = entryPrice - stopLoss
    takeProfit1 := entryPrice + riskReward      // 1:1 RR
    takeProfit2 := entryPrice + 2 * riskReward  // 1:2 RR
    tradeSide := "long"
    inTrade := true
    
    alert_message = createAlertMessage("buy", entryPrice, stopLoss, takeProfit1, takeProfit2)
    strategy.entry("Long", strategy.long, alert_message=alert_message)
    strategy.exit("TP1", from_entry="Long", limit=takeProfit1, stop=stopLoss, qty_percent=50)
    strategy.exit("TP2", from_entry="Long", limit=takeProfit2, stop=stopLoss)

// === SHORT Entry ===
if enterShort and not inTrade
    entryPrice := close
    stopLoss := prevHigh
    riskReward = stopLoss - entryPrice
    takeProfit1 := entryPrice - riskReward      // 1:1 RR
    takeProfit2 := entryPrice - 2 * riskReward  // 1:2 RR
    tradeSide := "short"
    inTrade := true
    
    alert_message = createAlertMessage("sell", entryPrice, stopLoss, takeProfit1, takeProfit2)
    strategy.entry("Short", strategy.short, alert_message=alert_message)
    strategy.exit("TP1", from_entry="Short", limit=takeProfit1, stop=stopLoss, qty_percent=50)
    strategy.exit("TP2", from_entry="Short", limit=takeProfit2, stop=stopLoss)

// === Reset logic after full exit
if inTrade
    exitReached = (tradeSide == "long" and (low <= stopLoss or high >= takeProfit2)) or
                  (tradeSide == "short" and (high >= stopLoss or low <= takeProfit2))
    if exitReached
        inTrade := false
        entryPrice := na
        stopLoss := na
        takeProfit1 := na
        takeProfit2 := na
        tradeSide := na

// === Plotting ===
barcolor(isBullMC ? color.orange : isBearMC ? color.orange : na)

// Plot manipulation candles
plotshape(isBullMC, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small, title="Bull MC")
plotshape(isBearMC, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small, title="Bear MC")

// Plot trade levels
plot(inTrade and not na(entryPrice) ? entryPrice : na, title="Entry", color=color.blue, style=plot.style_linebr, linewidth=2)
plot(inTrade and not na(stopLoss) ? stopLoss : na, title="Stop Loss", color=color.red, style=plot.style_linebr, linewidth=2)
plot(inTrade and not na(takeProfit1) ? takeProfit1 : na, title="Take Profit 1", color=color.teal, style=plot.style_linebr, linewidth=2)
plot(inTrade and not na(takeProfit2) ? takeProfit2 : na, title="Take Profit 2", color=color.green, style=plot.style_linebr, linewidth=2)
